#!/bin/bash

# Sleeps exist to prevent a set of bugs from happening.
# I Use proxychains because without it downloading will be slow.
# If you want to run these set of scripts with an unprivileged user then:
# pacman, yay, echo and mv must be added to sudoers file.
# Also move all the scripts to /usr/bin or /usr/local/bin or any place which is in PATH.
# You can remove proxychains in these scripts if you don't need them.
# REPO_NAME, ARCH_DIR, LOGS_DIR, SOURCE_DIR and BUILD_DIR can be adjusted to your liking.
# If you have installed it via the installer then it probably has done everything for you.

SOURCE_DIR="$HOME/source"
LOGS_DIR="$HOME/logs/build"
PKG_ALL="$HOME/pkg-all"
REPO_NAME="archlinuxir"
ARCH_DIR="/$REPO_NAME/x86_64"
BUILD_DIR="/build"
PKGBUILD=="$HOME/source/PKGBUILD"

# Add our own repository to let package checks work.
if cat /etc/pacman.conf | grep $REPO_NAME; then
   true
else
   sudo echo "[$REPO_NAME]
SigLevel = Optional
Server = https://mirror.bardia.tech/$repo/$arch" >> /etc/pacman.conf
fi

cd $HOME
rm -rf $SOURCE_DIR
BUILDDATE=$(date +'%Y-%m-%d-%H-%M-%S')
echo "Updating the system."
sudo pacman -Syu --noconfirm >> /dev/null

# This loop reads the file that countains our packages in my case its 'pkg'.

while IFS= read -r line; do
     proxychains aurdget $line | tee -a $LOGS_DIR/build-$BUILDDATE
done < $PKG_ALL

rm $SOURCE_DIR -rf && cd $HOME

# Compare first runs built packages to the ones that should have been built.

echo "Updating the system."
sudo pacman -Syu --noconfirm >> /dev/null
pacman -Sql $REPO_NAME > $LOGS_DIR/available-$BUILDDATE
diff --suppress-common-lines -y $PKG_ALL $LOGS_DIR/available-$BUILDDATE  | awk '{ print $1 }' | sort | grep -v '>' > $LOGS_DIR/missing-$BUILDDATE
sleep 2s

# The loop will be run a second time to build left out packages.

while IFS= read -r line; do
     proxychains aurdget $line | tee -a $LOGS_DIR/build-$BUILDDATE
done < $LOGS_DIR/missing-$BUILDDATE

rm $SOURCE_DIR -rf && cd $HOME

sleep 2s

# Compare second runs built packages to the ones that should have been built.

echo "Updating the system."
sudo pacman -Syu --noconfirm >> /dev/null
pacman -Sql $REPO_NAME > $LOGS_DIR/available2-$BUILDDATE
diff --suppress-common-lines -y pkg-all $LOGS_DIR/available2-$BUILDDATE  | awk '{ print $1 }' | sort | grep -v '>' >> > $LOGS_DIR/missing2-$BUILDDATE
sleep 2s

# The loop will be run a third time to build left out packages.

while IFS= read -r line; do
     proxychains aurdget $line | tee -a $LOGS_DIR/build-$BUILDDATE
done < $LOGS_DIR/missing2-$BUILDDATE

rm $SOURCE_DIR -rf && cd $HOME

sleep 2s

# Compare third runs built packages to the ones that should have been built.

echo "Updating the system."
sudo pacman -Syu --noconfirm >> /dev/null
pacman -Sql $REPO_NAME > $LOGS_DIR/available3-$BUILDDATE
diff --suppress-common-lines -y pkg-all $LOGS_DIR/available3-$BUILDDATE  | awk '{ print $1 }' | sort | grep -v '>' >> > $LOGS_DIR/missing3-$BUILDDATE
sleep 2s

# The loop will be run a forth time to build left out packages.

while IFS= read -r line; do
     proxychains aurdget $line | tee -a $LOGS_DIR/build-$BUILDDATE
done < $LOGS_DIR/missing3-$BUILDDATE

rm $SOURCE_DIR -rf && cd $HOME

sleep 2s

# Tor package file fails because of censorship so
# This pulls the PKGBUILD file and replaces a few
# values and runs the build script again.

proxychains aurdget tor-browser | tee -a $LOGS_DIR/build-$BUILDDATE
cd $HOME
sed -i 's#https://dist.torproject.org/torbrowser/#https://tor.calyxinstitute.org/dist/torbrowser/#g' $PKGBUILD
proxychains aurdget tor-browser | tee -a $LOGS_DIR/build-$BUILDDATE

# Copy built packages to webserver root and update the database.

cp $BUILD_DIR/*.pkg.tar.* $ARCH_DIR
echo "Updating the Database."
rm $ARCH_DIR/$REPO_NAME*
repo-add -R $ARCH_DIR/$REPO_NAME.db.tar.zst $ARCH_DIR/*.pkg.tar.zst > /dev/null 2>&1
echo "Database updated completed."
rm -rf $BUILD_DIR/*

# Remove our own repository from the list of repositories.
# This speeds things up a bit on updates.

if cat /etc/pacman.conf | grep $REPO_NAME; then
   sudo head -n -3 /etc/pacman.conf > /etc/pacman.conf.new
   sudo mv /etc/pacman.conf.new /etc/pacman.conf
else
   true
fi

find $LOGS_DIR -mindepth 1 -mtime +2 -delete
